// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  ext {
    VERSION = file("${rootDir}/version.txt").text
    binTrayKey = System.getenv("BINTRAY_API_KEY") ?: ""
  
    /**
     * Publish all local
     */
  
    publishProjects = [
        "kdux-android",
        "kdux-core"
    ]
  }

  apply from: "${rootDir}/gradle/versions.gradle"
  
  repositories {
    google()
    //gradlePluginPortal()
    jcenter()
    mavenCentral()
  }
  
  dependencies {
    classpath "com.android.tools.build:gradle:${Versions.androidGradle}"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${Versions.kotlin}"
    classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${Versions.bintray}"
  
  }
}

//def buildTask = null
//try {
//  buildTask = tasks.getByName("build")
//} catch (ex) {}
//
//if (buildTask == null) {
//  task build() {
//    doLast {
//      println("Built")
//    }
//  }
//}
/**
 * Publish install all
 */
task publishAll() {
  dependsOn(build)

  doLast {
    println("All published")
  }
}

/**
 * Publish install all
 */
task publishAllLocal() {
  doLast {
    println("All published locally")
  }
}

task installAllLocal() {
  doLast {
    println("All installed locally")
  }
}

task installLocal() {
  dependsOn publishAllLocal, installAllLocal
}



/**
 * Configure all projects
 */
allprojects {currentProject ->
  
  // SET VERSION
  currentProject.version = VERSION
  
  buildscript {
    apply from: "${rootDir}/gradle/versions.gradle"

  }
 
  // PLUGINS
  apply plugin: 'idea'
  
  
  // IF NOT APP THEN APPLY
  if (!["example-app","kdux-android"].contains(currentProject.name)) {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    sourceCompatibility = Versions.SOURCE_VERSION
    targetCompatibility = Versions.SOURCE_VERSION
    
  } else if (currentProject.name == "kdux-android") {
    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-android'
//    apply plugin: 'maven'
//    apply plugin: 'maven-publish'

  } else {
    apply plugin: 'com.android.application'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-kapt'
  }
  
  // KOTLIN
  kotlin {
    experimental { coroutines 'enable' }
  }
  
  
  configurations.all {
    resolutionStrategy {
      exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jre7'
      exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jre8'
      exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk7'
      exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk7'
      
      force(
        "org.jetbrains.kotlin:kotlin-stdlib:${Versions.kotlin}",
        "org.jetbrains.kotlin:kotlin-stdlib-jre7:${Versions.kotlin}",
        "org.jetbrains.kotlin:kotlin-stdlib-jre8:${Versions.kotlin}",
        "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${Versions.kotlin}",
        "org.jetbrains.kotlin:kotlin-reflect:${Versions.kotlin}",
        
        "androidx.test:core:${Versions.androidTestCore}",
        
        // AndroidJUnitRunner and JUnit Rules
        "androidx.test:runner:${Versions.androidTest}",
        "androidx.test:rules:${Versions.androidTest}",
        
        // Assertions
        "androidx.test.ext:junit:${Versions.androidTestExt}",
        "androidx.test.ext:truth:${Versions.androidTestExt}",
        "com.google.truth:truth:${Versions.googleTruth}",
        
        // Espresso dependencies
        "androidx.test.espresso:espresso-core:${Versions.androidTestEspresso}",
        "androidx.test.espresso:espresso-contrib:${Versions.androidTestEspresso}",
        "androidx.test.espresso:espresso-intents:${Versions.androidTestEspresso}",
        "androidx.test.espresso:espresso-accessibility:${Versions.androidTestEspresso}",
        "androidx.test.espresso:espresso-web:${Versions.androidTestEspresso}",
        "androidx.test.espresso.idling:idling-concurrent:${Versions.androidTestEspresso}",
        
        "androidx.test.espresso:espresso-idling-resource:${Versions.androidTestEspresso}"
      )
    }
  }
  
  
  // PUBLISHING
  if (publishProjects.contains(currentProject.name)) {
    apply plugin: 'com.jfrog.bintray'
    
    bintray {
      user = 'jonglanz'
      key = binTrayKey
      //publications = [(currentProject.name == "kdux-android" ? "RELEASE" : 'mavenJava')]
      publications = ['mavenJava']
      pkg {
        repo = 'oss'
        name = currentProject.name
        userOrg = 'densebrain'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/jglanz/kdux.git'
        version {
          name = VERSION
          released = new Date()
        }
      }
    }
  
    build.dependsOn(build)
    publishAll.dependsOn(bintrayUpload)
    publishAllLocal.dependsOn(publishToMavenLocal)
    installAllLocal.dependsOn(install)
  }
  
  // REPOS
  repositories {
    google()
    jcenter()
    mavenCentral()
  }

  dependencies {
    implementation(
        "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${Versions.kotlin}",
        "org.jetbrains.kotlin:kotlin-stdlib:${Versions.kotlin}",
        "org.jetbrains.kotlin:kotlin-reflect:${Versions.kotlin}",
      
        "io.arrow-kt:arrow-core:${Versions.arrow}",
        "io.arrow-kt:arrow-typeclasses:${Versions.arrow}",
        "io.arrow-kt:arrow-data:${Versions.arrow}",
        "io.arrow-kt:arrow-syntax:${Versions.arrow}",
        "io.arrow-kt:arrow-effects-kotlinx-coroutines:${Versions.arrow}",
        "org.slf4j:slf4j-api:${Versions.slf4j}"
    )
  
    //testImplementation("junit:junit:${junitVersion}")
  }
}


